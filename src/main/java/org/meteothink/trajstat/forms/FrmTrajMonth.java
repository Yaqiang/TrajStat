/* Copyright 2014 - Yaqiang Wang,
 * yaqiang.wang@gmail.com
 * 
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or (at
 * your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser
 * General Public License for more details.
 */
package org.meteothink.trajstat.forms;

import java.awt.Cursor;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.SwingWorker;
import org.meteothink.trajstat.trajectory.Location;
import org.meteothink.trajstat.trajectory.TrajConfig;
import org.meteothink.trajstat.trajectory.TrajUtil;

/**
 *
 * @author Yaqiang Wang
 */
public class FrmTrajMonth extends javax.swing.JDialog {

    private TrajConfig _trajConfig = new TrajConfig();
    //private TrajControl _trajControl = new TrajControl();
    private String _pluginPath;

    /**
     * Creates new form FrmTrajMonth
     * @param parent
     * @param modal
     * @param pluginPath
     */
    public FrmTrajMonth(java.awt.Frame parent, boolean modal, String pluginPath) {
        super(parent, modal);
        initComponents();
        this._pluginPath = pluginPath;

        //Set icon image
        BufferedImage image = null;
        try {
            image = ImageIO.read(this.getClass().getResource("/images/TrajStat_Logo.png"));
        } catch (IOException e) {
        }
        this.setIconImage(image);

        //Load control
        String cfn = _pluginPath + File.separator + "working" + File.separator + "CONTROL";
        this._trajConfig.loadControlFile(cfn);
        this._trajConfig.setTrajExcuteFileName(_pluginPath + File.separator + "working" + File.separator + "hyts_std.exe");
        this.setTrajConfig(_trajConfig);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel_YearMonth = new javax.swing.JLabel();
        jTextField_YearMonth = new javax.swing.JTextField();
        jCheckBox_MultiLocations = new javax.swing.JCheckBox();
        jLabel_YearMonth1 = new javax.swing.JLabel();
        jTextField_StartLocation = new javax.swing.JTextField();
        jButton_Locations = new javax.swing.JButton();
        jLabel_YearMonth2 = new javax.swing.JLabel();
        jTextField_RunHours = new javax.swing.JTextField();
        jLabel_YearMonth3 = new javax.swing.JLabel();
        jTextField_TopOfModel = new javax.swing.JTextField();
        jLabel_YearMonth4 = new javax.swing.JLabel();
        jTextField_StartHours = new javax.swing.JTextField();
        jPanel_Vertical = new javax.swing.JPanel();
        jRadioButton_Isob = new javax.swing.JRadioButton();
        jRadioButton_Isen = new javax.swing.JRadioButton();
        jRadioButton_Dens = new javax.swing.JRadioButton();
        jRadioButton_Data = new javax.swing.JRadioButton();
        jRadioButton_Sigma = new javax.swing.JRadioButton();
        jButton_Clear = new javax.swing.JButton();
        jButton_AddMeteoFiles = new javax.swing.JButton();
        jPanel_Duration = new javax.swing.JPanel();
        jLabel_YearMonth5 = new javax.swing.JLabel();
        jTextField_StartDay = new javax.swing.JTextField();
        jLabel_YearMonth6 = new javax.swing.JLabel();
        jTextField_EndDay = new javax.swing.JTextField();
        jLabel_YearMonth7 = new javax.swing.JLabel();
        jTextField_ExcuteFile = new javax.swing.JTextField();
        jButton_ExecuteFile = new javax.swing.JButton();
        jLabel_YearMonth8 = new javax.swing.JLabel();
        jTextField_OutputPath = new javax.swing.JTextField();
        jButton_OutPath = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jButton_LoadConfig = new javax.swing.JButton();
        jButton_SaveConfig = new javax.swing.JButton();
        jButton_Calculate = new javax.swing.JButton();
        jButton_Convert = new javax.swing.JButton();
        jButton_Combine = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList_MeteoFiles = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Trajectory Monthly Calculation");
        setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N

        jLabel_YearMonth.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel_YearMonth.setText("Year_Month (YY MM):");

        jTextField_YearMonth.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jCheckBox_MultiLocations.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jCheckBox_MultiLocations.setText("Multi_Locations");
        jCheckBox_MultiLocations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_MultiLocationsActionPerformed(evt);
            }
        });

        jLabel_YearMonth1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel_YearMonth1.setText("Start Location (Lat Lon Height(m agl)):");

        jTextField_StartLocation.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTextField_StartLocation.setPreferredSize(new java.awt.Dimension(6, 24));

        jButton_Locations.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButton_Locations.setText("Locations");
        jButton_Locations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_LocationsActionPerformed(evt);
            }
        });

        jLabel_YearMonth2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel_YearMonth2.setText("Run Hours:");

        jTextField_RunHours.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTextField_RunHours.setPreferredSize(new java.awt.Dimension(6, 24));

        jLabel_YearMonth3.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel_YearMonth3.setText("Top of Model (m agl):");

        jTextField_TopOfModel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTextField_TopOfModel.setPreferredSize(new java.awt.Dimension(6, 24));

        jLabel_YearMonth4.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel_YearMonth4.setText("Starting Hours (HH HH ...):");

        jTextField_StartHours.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTextField_StartHours.setPreferredSize(new java.awt.Dimension(6, 24));

        jPanel_Vertical.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Vertical", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 12))); // NOI18N
        jPanel_Vertical.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        buttonGroup1.add(jRadioButton_Isob);
        jRadioButton_Isob.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jRadioButton_Isob.setText("1: isob");

        buttonGroup1.add(jRadioButton_Isen);
        jRadioButton_Isen.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jRadioButton_Isen.setText("2: isen");

        buttonGroup1.add(jRadioButton_Dens);
        jRadioButton_Dens.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jRadioButton_Dens.setText("3: dens");

        buttonGroup1.add(jRadioButton_Data);
        jRadioButton_Data.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jRadioButton_Data.setText("0: data");

        buttonGroup1.add(jRadioButton_Sigma);
        jRadioButton_Sigma.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jRadioButton_Sigma.setText("4: sigma");

        javax.swing.GroupLayout jPanel_VerticalLayout = new javax.swing.GroupLayout(jPanel_Vertical);
        jPanel_Vertical.setLayout(jPanel_VerticalLayout);
        jPanel_VerticalLayout.setHorizontalGroup(
            jPanel_VerticalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_VerticalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jRadioButton_Data)
                .addGap(18, 18, 18)
                .addComponent(jRadioButton_Isob)
                .addGap(18, 18, 18)
                .addComponent(jRadioButton_Isen)
                .addGap(18, 18, 18)
                .addComponent(jRadioButton_Dens)
                .addGap(18, 18, 18)
                .addComponent(jRadioButton_Sigma)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel_VerticalLayout.setVerticalGroup(
            jPanel_VerticalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_VerticalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_VerticalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton_Isob)
                    .addComponent(jRadioButton_Isen)
                    .addComponent(jRadioButton_Dens)
                    .addComponent(jRadioButton_Sigma)
                    .addComponent(jRadioButton_Data))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton_Clear.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButton_Clear.setText("Clear");
        jButton_Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ClearActionPerformed(evt);
            }
        });

        jButton_AddMeteoFiles.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButton_AddMeteoFiles.setText("Add Meteorological Files");
        jButton_AddMeteoFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_AddMeteoFilesActionPerformed(evt);
            }
        });

        jPanel_Duration.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Duration", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 12))); // NOI18N

        jLabel_YearMonth5.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel_YearMonth5.setText("Start Day:");

        jTextField_StartDay.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jLabel_YearMonth6.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel_YearMonth6.setText("End Day:");

        jTextField_EndDay.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        javax.swing.GroupLayout jPanel_DurationLayout = new javax.swing.GroupLayout(jPanel_Duration);
        jPanel_Duration.setLayout(jPanel_DurationLayout);
        jPanel_DurationLayout.setHorizontalGroup(
            jPanel_DurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_DurationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_DurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_YearMonth5)
                    .addComponent(jTextField_StartDay, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_YearMonth6)
                    .addComponent(jTextField_EndDay, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel_DurationLayout.setVerticalGroup(
            jPanel_DurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_DurationLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel_YearMonth5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField_StartDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(jLabel_YearMonth6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField_EndDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel_YearMonth7.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel_YearMonth7.setText("Execute File:");

        jTextField_ExcuteFile.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTextField_ExcuteFile.setPreferredSize(new java.awt.Dimension(6, 24));

        jButton_ExecuteFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/TSB_Open.Image.png"))); // NOI18N
        jButton_ExecuteFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ExecuteFileActionPerformed(evt);
            }
        });

        jLabel_YearMonth8.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel_YearMonth8.setText("Output Path:");

        jTextField_OutputPath.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTextField_OutputPath.setPreferredSize(new java.awt.Dimension(6, 24));

        jButton_OutPath.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/TSB_Open.Image.png"))); // NOI18N
        jButton_OutPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_OutPathActionPerformed(evt);
            }
        });

        jSeparator1.setForeground(new java.awt.Color(255, 51, 51));

        jButton_LoadConfig.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButton_LoadConfig.setText("Load Config");
        jButton_LoadConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_LoadConfigActionPerformed(evt);
            }
        });

        jButton_SaveConfig.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButton_SaveConfig.setText("Save Config");
        jButton_SaveConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_SaveConfigActionPerformed(evt);
            }
        });

        jButton_Calculate.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButton_Calculate.setText("Calculate");
        jButton_Calculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_CalculateActionPerformed(evt);
            }
        });

        jButton_Convert.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButton_Convert.setText("Convert");
        jButton_Convert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ConvertActionPerformed(evt);
            }
        });

        jButton_Combine.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButton_Combine.setText("Combine");
        jButton_Combine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_CombineActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(jList_MeteoFiles);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel_YearMonth7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField_ExcuteFile, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton_ExecuteFile, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel_YearMonth8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField_OutputPath, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton_OutPath, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jPanel_Vertical, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel_YearMonth4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jTextField_StartHours, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel_YearMonth)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jTextField_YearMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jCheckBox_MultiLocations))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel_YearMonth1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jTextField_StartLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jButton_Locations))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel_YearMonth2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jTextField_RunHours, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel_YearMonth3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jTextField_TopOfModel, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jButton_AddMeteoFiles, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(jButton_Clear, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(0, 0, Short.MAX_VALUE))
                                        .addComponent(jScrollPane2))
                                    .addGap(18, 18, 18)
                                    .addComponent(jPanel_Duration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton_LoadConfig)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton_SaveConfig)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton_Calculate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton_Convert)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton_Combine)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_YearMonth)
                    .addComponent(jTextField_YearMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox_MultiLocations))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_YearMonth1)
                    .addComponent(jTextField_StartLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_Locations))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_YearMonth2)
                    .addComponent(jTextField_RunHours, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_YearMonth3)
                    .addComponent(jTextField_TopOfModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_YearMonth4)
                    .addComponent(jTextField_StartHours, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel_Vertical, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton_Clear, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton_AddMeteoFiles, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(jPanel_Duration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel_YearMonth7)
                        .addComponent(jTextField_ExcuteFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton_ExecuteFile, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel_YearMonth8)
                        .addComponent(jTextField_OutputPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton_OutPath, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_LoadConfig, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_SaveConfig, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_Calculate, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_Convert, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_Combine, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_ExecuteFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ExecuteFileActionPerformed
        // TODO add your handling code here:
        String path = System.getProperty("user.dir");
        File pathDir = new File(path);
        JFileChooser aDlg = new JFileChooser();
        aDlg.setAcceptAllFileFilterUsed(false);
        aDlg.setCurrentDirectory(pathDir);
        //aDlg.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (JFileChooser.APPROVE_OPTION == aDlg.showOpenDialog(this)) {
            File aFile = aDlg.getSelectedFile();
            //System.setProperty("user.dir", aFile.getParent());

            this.jTextField_ExcuteFile.setText(aFile.getAbsolutePath());
        }
    }//GEN-LAST:event_jButton_ExecuteFileActionPerformed

    private void jButton_OutPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_OutPathActionPerformed
        // TODO add your handling code here:
        String path = System.getProperty("user.dir");
        File pathDir = new File(path);
        JFileChooser aDlg = new JFileChooser();
        aDlg.setAcceptAllFileFilterUsed(false);
        aDlg.setCurrentDirectory(pathDir);
        aDlg.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (JFileChooser.APPROVE_OPTION == aDlg.showOpenDialog(this)) {
            File aFile = aDlg.getSelectedFile();
            //System.setProperty("user.dir", aFile.getParent());

            this.jTextField_OutputPath.setText(aFile.getAbsolutePath());
        }
    }//GEN-LAST:event_jButton_OutPathActionPerformed

    private void jButton_LoadConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_LoadConfigActionPerformed
        // TODO add your handling code here:
        String path = System.getProperty("user.dir");
        File pathDir = new File(path);
        JFileChooser aDlg = new JFileChooser();
        //aDlg.setAcceptAllFileFilterUsed(false);
        aDlg.setCurrentDirectory(pathDir);
        //aDlg.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (JFileChooser.APPROVE_OPTION == aDlg.showOpenDialog(this)) {
            File aFile = aDlg.getSelectedFile();
            //System.setProperty("user.dir", aFile.getParent());

            this._trajConfig.loadControlFile(aFile.getAbsolutePath());
        }
    }//GEN-LAST:event_jButton_LoadConfigActionPerformed

    private void jCheckBox_MultiLocationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_MultiLocationsActionPerformed
        // TODO add your handling code here:
        if (this.jCheckBox_MultiLocations.isSelected()) {
            this.jTextField_StartLocation.setEnabled(false);
            this.jButton_Locations.setEnabled(true);
        } else {
            this.jTextField_StartLocation.setEnabled(true);
            this.jButton_Locations.setEnabled(false);
        }
    }//GEN-LAST:event_jCheckBox_MultiLocationsActionPerformed

    private void jButton_SaveConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_SaveConfigActionPerformed
        // TODO add your handling code here:
        String path = System.getProperty("user.dir");
        File pathDir = new File(path);
        JFileChooser aDlg = new JFileChooser();
        //aDlg.setAcceptAllFileFilterUsed(false);
        aDlg.setCurrentDirectory(pathDir);
        //aDlg.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (JFileChooser.APPROVE_OPTION == aDlg.showSaveDialog(this)) {
            File aFile = aDlg.getSelectedFile();
            //System.setProperty("user.dir", aFile.getParent());

            this.getTrajConfig();
            this._trajConfig.saveControlFile(aFile.getAbsolutePath());
        }
    }//GEN-LAST:event_jButton_SaveConfigActionPerformed

    private void jButton_LocationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_LocationsActionPerformed
        // TODO add your handling code here:
        FrmStartLocations frm = new FrmStartLocations(this, true);
        frm.setLocations(this._trajConfig.getLocations());
        frm.setLocationRelativeTo(this);
        frm.setVisible(true);

        if (frm.isOK()) {
            this._trajConfig.setLocations(frm.getLocations());
        }
    }//GEN-LAST:event_jButton_LocationsActionPerformed

    private void jButton_AddMeteoFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_AddMeteoFilesActionPerformed
        // TODO add your handling code here:
        String path = System.getProperty("user.dir");
        File pathDir = new File(path);
        JFileChooser aDlg = new JFileChooser();
        aDlg.setAcceptAllFileFilterUsed(false);
        aDlg.setCurrentDirectory(pathDir);
        aDlg.setMultiSelectionEnabled(true);
        if (JFileChooser.APPROVE_OPTION == aDlg.showOpenDialog(this)) {
            File[] files = aDlg.getSelectedFiles();
            System.setProperty("user.dir", files[0].getParent());

            DefaultListModel listModel = (DefaultListModel)this.jList_MeteoFiles.getModel();
            if (listModel == null)
                listModel = new DefaultListModel();
            for (File f : files) {
                listModel.addElement(f.getAbsoluteFile());
            }
            this.jList_MeteoFiles.setModel(listModel);
        }
    }//GEN-LAST:event_jButton_AddMeteoFilesActionPerformed

    private void jButton_ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ClearActionPerformed
        // TODO add your handling code here:
        this.jList_MeteoFiles.setModel(new DefaultListModel());
    }//GEN-LAST:event_jButton_ClearActionPerformed

    private void jButton_CalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_CalculateActionPerformed
        // TODO add your handling code here:
        //this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        this.getTrajConfig();
        try {
            this.trajCalculation();
        } catch (IOException ex) {
            Logger.getLogger(FrmTrajMonth.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(FrmTrajMonth.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton_CalculateActionPerformed

    private void jButton_ConvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ConvertActionPerformed
        // TODO add your handling code here:
        this.getTrajConfig();
        try {
            this.convertToTGS();
        } catch (IOException ex) {
            Logger.getLogger(FrmTrajMonth.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(FrmTrajMonth.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton_ConvertActionPerformed

    private void jButton_CombineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_CombineActionPerformed
        // TODO add your handling code here:
        this.getTrajConfig();
        try {
            this.joinTGSFiles();
        } catch (IOException ex) {
            Logger.getLogger(FrmTrajMonth.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(FrmTrajMonth.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton_CombineActionPerformed

    /**
     * Set Trajectory config
     *
     * @param trajConfig Trajctory config
     */
    private void setTrajConfig(TrajConfig tc) {
        this._trajConfig = tc;
        SimpleDateFormat format = new SimpleDateFormat("yy MM");
        this.jTextField_YearMonth.setText(format.format(tc.getStartTime()));
        if (tc.getLocations().size() > 1) {
            this.jCheckBox_MultiLocations.setSelected(true);
            this.jTextField_StartLocation.setEnabled(false);
            this.jButton_Locations.setEnabled(true);
        } else {
            this.jCheckBox_MultiLocations.setSelected(false);
            this.jTextField_StartLocation.setEnabled(true);
            this.jButton_Locations.setEnabled(false);
            this.jTextField_StartLocation.setText(tc.getLocations().get(0).toString());
        }

        this.jTextField_RunHours.setText(String.valueOf(tc.getRunHours()));
        this.jTextField_TopOfModel.setText(String.valueOf(tc.getTopOfModel()));
        this.jTextField_StartHours.setText(tc.getStartHoursString());
        switch (tc.getVertical()) {
            case 0:
                this.jRadioButton_Data.setSelected(true);
                break;
            case 1:
                this.jRadioButton_Isob.setSelected(true);
                break;
            case 2:
                this.jRadioButton_Isen.setSelected(true);
                break;
            case 3:
                this.jRadioButton_Dens.setSelected(true);
                break;
            case 4:
                this.jRadioButton_Sigma.setSelected(true);
                break;
        }
        DefaultListModel listModel = new DefaultListModel();
        for (String mfn : tc.getMeteoFiles()) {
            listModel.addElement(mfn);
        }
        this.jList_MeteoFiles.setModel(listModel);
        this.jTextField_StartDay.setText(String.valueOf(tc.getStartDay()));
        this.jTextField_EndDay.setText(String.valueOf(tc.getEndDay()));
        this.jTextField_ExcuteFile.setText(tc.getTrajExcuteFileName());
        this.jTextField_OutputPath.setText(tc.getOutPath());
    }

    private void getTrajConfig() {
        this._trajConfig.setStartHours(this.jTextField_StartHours.getText());
        this._trajConfig.setStartDay(Integer.parseInt(this.jTextField_StartDay.getText()));
        this._trajConfig.setEndDay(Integer.parseInt(this.jTextField_EndDay.getText()));
        String ymStr = this.jTextField_YearMonth.getText();
        String[] strs = ymStr.trim().split("\\s+");
        int year = Integer.parseInt(strs[0]);
        int month = Integer.parseInt(strs[1]);
        if (year < 50) {
            year = 2000 + year;
        } else {
            year = 1900 + year;
        }        
        this._trajConfig.initStartTime(year, month);
        if (!this.jCheckBox_MultiLocations.isSelected()){
            List<Location> locations = new ArrayList<Location>();
            locations.add(new Location(this.jTextField_StartLocation.getText().trim()));
            this._trajConfig.setLocations(locations);
        }
        this._trajConfig.setRunHours(Integer.parseInt(this.jTextField_RunHours.getText()));
        this._trajConfig.setTopOfModel(Float.parseFloat(this.jTextField_TopOfModel.getText()));
        int v = 0;
        if (this.jRadioButton_Data.isSelected()) {
            v = 0;
        } else if (this.jRadioButton_Isob.isSelected()) {
            v = 1;
        } else if (this.jRadioButton_Isen.isSelected()) {
            v = 2;
        } else if (this.jRadioButton_Dens.isSelected()) {
            v = 3;
        } else if (this.jRadioButton_Sigma.isSelected()) {
            v = 4;
        }
        this._trajConfig.setVertical(v);
        DefaultListModel listModel = (DefaultListModel) this.jList_MeteoFiles.getModel();
        List<String> meteoFiles = new ArrayList<String>();
        for (int i = 0; i < listModel.getSize(); i++) {
            meteoFiles.add(listModel.get(i).toString());
        }
        this._trajConfig.setMeteoFiles(meteoFiles);
        this._trajConfig.setTrajExcuteFileName(this.jTextField_ExcuteFile.getText());
        this._trajConfig.setOutPath(this.jTextField_OutputPath.getText());
    }

    private void trajCalculation() throws IOException, InterruptedException {

        SwingWorker worker = new SwingWorker<String, String>() {
            @Override
            protected String doInBackground() throws Exception {

                FrmTrajMonth.this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                String cfn = FrmTrajMonth.this._pluginPath + File.separator + "working" + File.separator + "CONTROL";
                FrmTrajMonth.this.jProgressBar1.setValue(0);

                //Loop
                int dayNum = FrmTrajMonth.this._trajConfig.getDayNum();
                int hourNum = FrmTrajMonth.this._trajConfig.getStartHoursNum();
                int tnum = dayNum * hourNum;
                for (int i = 0; i < dayNum; i++) {
                    for (int j = 0; j < hourNum; j++) {
                        //Write control file
                        FrmTrajMonth.this._trajConfig.upateStartTime(i, j);
                        FrmTrajMonth.this._trajConfig.saveControlFile(cfn);

                        //Run trajectory module
                        ProcessBuilder pb = new ProcessBuilder(FrmTrajMonth.this._trajConfig.getTrajExcuteFileName());
                        pb.directory(new File(FrmTrajMonth.this._pluginPath + File.separator + "working"));
                        Process process = pb.start();
                        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                        String s;
                        while ((s = bufferedReader.readLine()) != null)
                            System.out.println(s);
                        process.waitFor();
                        FrmTrajMonth.this.jProgressBar1.setValue((int) ((double) (i * hourNum + j + 1) / tnum * 100));
                    }
                }

                return "";
            }

            @Override
            protected void done() {
                FrmTrajMonth.this.jProgressBar1.setValue(0);
                FrmTrajMonth.this.setCursor(null);
            }
        };
        worker.execute();
    }

    private void convertToTGS() throws IOException, InterruptedException {

        SwingWorker worker = new SwingWorker<String, String>() {
            @Override
            protected String doInBackground() throws Exception {

                FrmTrajMonth.this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                FrmTrajMonth.this.jProgressBar1.setValue(0);

                //Loop
                int dayNum = FrmTrajMonth.this._trajConfig.getDayNum();
                int hourNum = FrmTrajMonth.this._trajConfig.getStartHoursNum();                
                SimpleDateFormat format = new SimpleDateFormat("yyyyMMdd");                
                for (int i = 0; i < dayNum; i++) {
                    _trajConfig.upateStartTime(i, 0);
                    String tgsfn = _trajConfig.getOutPath() + format.format(_trajConfig.getStartTime())
                            + ".tgs";                    
                    List<String> trajfns = new ArrayList<>();
                    for (int j = 0; j < hourNum; j++) {
                        //Write control file
                        _trajConfig.upateStartTime(i, j);
                        String trajfn = _trajConfig.getOutPath() + _trajConfig.getTrajFileName();
                        trajfns.add(trajfn);                        
                    }
                    TrajUtil.trajToTGS(trajfns, tgsfn);
                    FrmTrajMonth.this.jProgressBar1.setValue((int) ((double) (i + 1) / dayNum * 100));                    
                }

                return "";
            }

            @Override
            protected void done() {
                FrmTrajMonth.this.jProgressBar1.setValue(0);
                FrmTrajMonth.this.setCursor(null);
            }
        };
        worker.execute();
    }

    private void joinTGSFiles() throws IOException, InterruptedException {

        SwingWorker worker = new SwingWorker<String, String>() {
            @Override
            protected String doInBackground() throws Exception {

                FrmTrajMonth.this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                FrmTrajMonth.this.jProgressBar1.setValue(0);

                //Loop
                int dayNum = FrmTrajMonth.this._trajConfig.getDayNum();
                SimpleDateFormat format = new SimpleDateFormat("yyyyMM");
                String monthfn = _trajConfig.getOutPath() + format.format(_trajConfig.getStartTime()) + ".tgs";
                BufferedWriter bw = new BufferedWriter(new FileWriter(new File(monthfn)));
                bw.write("start_year,start_month,start_day,start_hour,year,month,day,hour,age_hour,latitude,longitude,height,press");
                bw.newLine();
                format = new SimpleDateFormat("yyyyMMdd");
                for (int i = 0; i < dayNum; i++) {
                    _trajConfig.upateStartTime(i, 0);
                    String tgsfn = _trajConfig.getOutPath() + format.format(_trajConfig.getStartTime()) + ".tgs";
                    if (!new File(tgsfn).exists()) {
                        continue;
                    }
                    BufferedReader sr = new BufferedReader(new FileReader(new File(tgsfn)));
                    sr.readLine();
                    String aLine = sr.readLine();
                    while (aLine != null) {
                        if (aLine.isEmpty()) {
                            aLine = sr.readLine();
                        }
                        bw.write(aLine);
                        bw.newLine();
                        aLine = sr.readLine();
                    }
                    sr.close();

                    FrmTrajMonth.this.jProgressBar1.setValue((int) ((double) (i + 1) / dayNum * 100));                    
                }
                bw.close();

                return "";
            }

            @Override
            protected void done() {
                FrmTrajMonth.this.jProgressBar1.setValue(0);
                FrmTrajMonth.this.setCursor(null);
            }
        };
        worker.execute();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmTrajMonth.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmTrajMonth.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmTrajMonth.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmTrajMonth.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FrmTrajMonth dialog = new FrmTrajMonth(new javax.swing.JFrame(), true, "");
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton_AddMeteoFiles;
    private javax.swing.JButton jButton_Calculate;
    private javax.swing.JButton jButton_Clear;
    private javax.swing.JButton jButton_Combine;
    private javax.swing.JButton jButton_Convert;
    private javax.swing.JButton jButton_ExecuteFile;
    private javax.swing.JButton jButton_LoadConfig;
    private javax.swing.JButton jButton_Locations;
    private javax.swing.JButton jButton_OutPath;
    private javax.swing.JButton jButton_SaveConfig;
    private javax.swing.JCheckBox jCheckBox_MultiLocations;
    private javax.swing.JLabel jLabel_YearMonth;
    private javax.swing.JLabel jLabel_YearMonth1;
    private javax.swing.JLabel jLabel_YearMonth2;
    private javax.swing.JLabel jLabel_YearMonth3;
    private javax.swing.JLabel jLabel_YearMonth4;
    private javax.swing.JLabel jLabel_YearMonth5;
    private javax.swing.JLabel jLabel_YearMonth6;
    private javax.swing.JLabel jLabel_YearMonth7;
    private javax.swing.JLabel jLabel_YearMonth8;
    private javax.swing.JList jList_MeteoFiles;
    private javax.swing.JPanel jPanel_Duration;
    private javax.swing.JPanel jPanel_Vertical;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JRadioButton jRadioButton_Data;
    private javax.swing.JRadioButton jRadioButton_Dens;
    private javax.swing.JRadioButton jRadioButton_Isen;
    private javax.swing.JRadioButton jRadioButton_Isob;
    private javax.swing.JRadioButton jRadioButton_Sigma;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextField_EndDay;
    private javax.swing.JTextField jTextField_ExcuteFile;
    private javax.swing.JTextField jTextField_OutputPath;
    private javax.swing.JTextField jTextField_RunHours;
    private javax.swing.JTextField jTextField_StartDay;
    private javax.swing.JTextField jTextField_StartHours;
    private javax.swing.JTextField jTextField_StartLocation;
    private javax.swing.JTextField jTextField_TopOfModel;
    private javax.swing.JTextField jTextField_YearMonth;
    // End of variables declaration//GEN-END:variables
}
